package schema

// Composer options.
type Config struct {
	AllowPlugins          *AllowPlugins                `json:"allow-plugins"`                   // This is an object of {"pattern": true|false} with packages which are allowed to be loaded; as plugins, or true to allow all, false to allow none. Defaults to {} which prompts when; an unknown plugin is added.
	ApcuAutoloader        *bool                        `json:"apcu-autoloader,omitempty"`       // If true, the Composer autoloader will check for APCu and use it to cache found/not-found; classes when the extension is enabled, defaults to false.
	ArchiveDir            *string                      `json:"archive-dir,omitempty"`           // The default archive path when not provided on cli, defaults to ".".
	ArchiveFormat         *string                      `json:"archive-format,omitempty"`        // The default archiving format when not provided on cli, defaults to "tar".
	AutoloaderSuffix      *string                      `json:"autoloader-suffix,omitempty"`     // Optional string to be used as a suffix for the generated Composer autoloader. When null a; random one will be generated.
	Bearer                map[string]string            `json:"bearer,omitempty"`                // An object of domain name => bearer authentication token, for example; {"example.com":"<token>"}.
	BinCompat             *BinCompat                   `json:"bin-compat,omitempty"`            // The compatibility of the binaries, defaults to "auto" (automatically guessed), can be; "full" (compatible with both Windows and Unix-based systems) and "proxy" (only bash-style; proxy).
	BinDir                *string                      `json:"bin-dir,omitempty"`               // The location where all binaries are linked, defaults to "vendor/bin".
	BitbucketOauth        map[string]BitbucketOauth    `json:"bitbucket-oauth,omitempty"`       // An object of domain name => {"consumer-key": "...", "consumer-secret": "..."}.
	CacheDir              *string                      `json:"cache-dir,omitempty"`             // The location where all caches are located, defaults to "~/.composer/cache" on *nix and; "%LOCALAPPDATA%\Composer" on windows.
	CacheFilesDir         *string                      `json:"cache-files-dir,omitempty"`       // The location where files (zip downloads) are cached, defaults to "{$cache-dir}/files".
	CacheFilesMaxsize     *CacheFilesMaxsize           `json:"cache-files-maxsize"`             // The cache max size for the files cache, defaults to "300MiB".
	CacheFilesTTL         *int64                       `json:"cache-files-ttl,omitempty"`       // The cache time-to-live for files, defaults to the value of cache-ttl.
	CacheReadOnly         *bool                        `json:"cache-read-only,omitempty"`       // Whether to use the Composer cache in read-only mode.
	CacheRepoDir          *string                      `json:"cache-repo-dir,omitempty"`        // The location where repo (git/hg repo clones) are cached, defaults to "{$cache-dir}/repo".
	CacheTTL              *int64                       `json:"cache-ttl,omitempty"`             // The default cache time-to-live, defaults to 15552000 (6 months).
	CacheVcsDir           *string                      `json:"cache-vcs-dir,omitempty"`         // The location where vcs infos (git clones, github api calls, etc. when reading vcs repos); are cached, defaults to "{$cache-dir}/vcs".
	Cafile                *string                      `json:"cafile,omitempty"`                // A way to set the path to the openssl CA file. In PHP 5.6+ you should rather set this via; openssl.cafile in php.ini, although PHP 5.6+ should be able to detect your system CA file; automatically.
	Capath                *string                      `json:"capath,omitempty"`                // If cafile is not specified or if the certificate is not found there, the directory; pointed to by capath is searched for a suitable certificate. capath must be a correctly; hashed certificate directory.
	ClassmapAuthoritative *bool                        `json:"classmap-authoritative,omitempty"`// If true, the composer autoloader will not scan the filesystem for classes that are not; found in the class map, defaults to false.
	DataDir               *string                      `json:"data-dir,omitempty"`              // The location where old phar files are stored, defaults to "$home" except on XDG Base; Directory compliant unixes.
	DisableTLS            *bool                        `json:"disable-tls,omitempty"`           // Defaults to `false`. If set to true all HTTPS URLs will be tried with HTTP instead and no; network level encryption is performed. Enabling this is a security risk and is NOT; recommended. The better way is to enable the php_openssl extension in php.ini.
	DiscardChanges        *Abandoned                   `json:"discard-changes"`                 // The default style of handling dirty updates, defaults to false and can be any of true,; false or "stash".
	GithubDomains         []string                     `json:"github-domains,omitempty"`        // A list of domains to use in github mode. This is used for GitHub Enterprise setups,; defaults to ["github.com"].
	GithubExposeHostname  *bool                        `json:"github-expose-hostname,omitempty"`// Defaults to true. If set to false, the OAuth tokens created to access the github API will; have a date instead of the machine hostname.
	GithubOauth           map[string]string            `json:"github-oauth,omitempty"`          // An object of domain name => github API oauth tokens, typically {"github.com":"<token>"}.
	GithubProtocols       []string                     `json:"github-protocols,omitempty"`      // A list of protocols to use for github.com clones, in priority order, defaults to; ["https", "ssh", "git"].
	GitlabDomains         []string                     `json:"gitlab-domains,omitempty"`        // A list of domains to use in gitlab mode. This is used for custom GitLab setups, defaults; to ["gitlab.com"].
	GitlabOauth           map[string]string            `json:"gitlab-oauth,omitempty"`          // An object of domain name => gitlab API oauth tokens, typically {"gitlab.com":"<token>"}.
	GitlabProtocol        *GitlabProtocol              `json:"gitlab-protocol,omitempty"`       // A protocol to force use of when creating a repository URL for the `source` value of the; package metadata. One of `git` or `http`. By default, Composer will generate a git URL; for private repositories and http one for public repos.
	GitlabToken           map[string]*GitlabTokenValue `json:"gitlab-token,omitempty"`          // An object of domain name => gitlab private tokens, typically {"gitlab.com":"<token>"}, or; an object with username and token keys.
	HtaccessProtect       *bool                        `json:"htaccess-protect,omitempty"`      // Defaults to true. If set to false, Composer will not create .htaccess files in the; composer home, cache, and data directories.
	HTTPBasic             map[string]HTTPBasic         `json:"http-basic,omitempty"`            // An object of domain name => {"username": "...", "password": "..."}.
	Lock                  *bool                        `json:"lock,omitempty"`                  // Defaults to true. If set to false, Composer will not create a composer.lock file.
	NotifyOnInstall       *bool                        `json:"notify-on-install,omitempty"`     // Composer allows repositories to define a notification URL, so that they get notified; whenever a package from that repository is installed. This option allows you to disable; that behaviour, defaults to true.
	OptimizeAutoloader    *bool                        `json:"optimize-autoloader,omitempty"`   // Always optimize when dumping the autoloader.
	Platform              map[string]*Abandoned        `json:"platform,omitempty"`              // This is an object of package name (keys) and version (values) that will be used to mock; the platform packages on this machine, the version can be set to false to make it appear; like the package is not present.
	PlatformCheck         *Abandoned                   `json:"platform-check"`                  // Defaults to "php-only" which checks only the PHP version. Setting to true will also check; the presence of required PHP extensions. If set to false, Composer will not create and; require a platform_check.php file as part of the autoloader bootstrap.
	PreferredInstall      *PreferredInstall            `json:"preferred-install"`               // The install method Composer will prefer to use, defaults to auto and can be any of; source, dist, auto, or an object of {"pattern": "preference"}.
	PrependAutoloader     *bool                        `json:"prepend-autoloader,omitempty"`    // If false, the composer autoloader will not be prepended to existing autoloaders, defaults; to true.
	ProcessTimeout        *int64                       `json:"process-timeout,omitempty"`       // The timeout in seconds for process executions, defaults to 300 (5mins).
	SecureHTTP            *bool                        `json:"secure-http,omitempty"`           // Defaults to `true`. If set to true only HTTPS URLs are allowed to be downloaded via; Composer. If you really absolutely need HTTP access to something then you can disable it,; but using "Let's Encrypt" to get a free SSL certificate is generally a better alternative.
	SecureSvnDomains      []string                     `json:"secure-svn-domains,omitempty"`    // A list of domains which should be trusted/marked as using a secure Subversion/SVN; transport. By default svn:// protocol is seen as insecure and will throw. This is a; better/safer alternative to disabling `secure-http` altogether.
	SortPackages          *bool                        `json:"sort-packages,omitempty"`         // Defaults to false. If set to true, Composer will sort packages when adding/updating a new; dependency.
	StoreAuths            *Abandoned                   `json:"store-auths"`                     // What to do after prompting for authentication, one of: true (store), false (do not store); or "prompt" (ask every time), defaults to prompt.
	UseGithubAPI          *bool                        `json:"use-github-api,omitempty"`        // Defaults to true.  If set to false, globally disables the use of the GitHub API for all; GitHub repositories and clones the repository as it would for any other repository.
	UseIncludePath        *bool                        `json:"use-include-path,omitempty"`      // If true, the Composer autoloader will also look for classes in the PHP include path.
	UseParentDir          *Abandoned                   `json:"use-parent-dir"`                  // When running Composer in a directory where there is no composer.json, if there is one; present in a directory above Composer will by default ask you whether you want to use; that directory's composer.json instead. One of: true (always use parent if needed), false; (never ask or use it) or "prompt" (ask every time), defaults to prompt.
	VendorDir             *string                      `json:"vendor-dir,omitempty"`            // The location where all packages are installed, defaults to "vendor".
}
